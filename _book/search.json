[
  {
    "objectID": "04-neotoma2.html#part1-background",
    "href": "04-neotoma2.html#part1-background",
    "title": "5  The neotoma2 package",
    "section": "5.1 Part1: Background",
    "text": "5.1 Part1: Background\nThis series of exercises is designed to give you hands-on practice in using APIs and the neotoma2 R package (Goring et al. 2015), both for practical reasons and for insights into how open-data systems work. The primary purpose of neotoma2 is to pass data from the Neotoma Paleoecology Database (Neotoma DB) server into your local R environment. Neotoma relies on Application Programming Interfaces (APIs) to communicate with the Neotoma Paleoecology Database, so we’ll begin with an introduction to APIs.\nMuch of this exercise is based on A Simple Workflow and A Not so Simple Workflow tutorials that were originally developed for a workshop convened by the European Pollen Database in June 2022. Today we’ll keep the initial analyses relatively simple, so that you can focus on learning the data structures and functions used by neotoma2. A hard-won lesson for a practicing data scientist is how much time and attention goes into data handling!\nIn this tutorial you will learn how to:\n\nUse the Neotoma API\nSearch for sites using site names and geographic parameters\nFilter results using temporal and spatial parameters\nObtain sample information for the selected datasets\nPerform basic analysis including the use of climate data from rasters\n\nThis series of exercises is designed to give you hands-on practice in using APIs and the neotoma2 R package, both for practical reasons and for insights into how open-data systems work. neotoma2’s primary purpose is to pass data from the Neotoma DB server into your local R computing environment. Neotoma relies on Application Programming Interfaces (APIs) to communicate with the Neotoma Paleoecology Database, so we’ll begin with an introduction to APIs."
  },
  {
    "objectID": "04-neotoma2.html#the-wide-wide-world-of-apis",
    "href": "04-neotoma2.html#the-wide-wide-world-of-apis",
    "title": "5  The neotoma2 package",
    "section": "5.2 The Wide, Wide World of APIs",
    "text": "5.2 The Wide, Wide World of APIs\nThe Neotoma Paleoecology Database is a relational database, hosted on servers at Penn State’s Center for Environmental Informatics. For security reasons, direct access to these servers is quite limited, and available only to a few Neotoma and CEI programmers.\nAPIs offer public access points into Neotoma that anyone can use. Each API is basically a function: you provide the API with a set of operational parameters, and it returns a set of data or metadata. Each API hence is designed to support one particular task or set of tasks; it offers a narrow window into the larger Neotoma DB. REST-ful APIs follow a particular set of standards that allow them to be read by web browsers (i.e. within the HTTP protocol) and return data objects, typically in HTML, XML, JSON or other human- & machine-readable formats.\nThe Neotoma APIs provide a series of functions for retrieving different kinds of data from Neotoma DB. Data objects are returned in JSON format. For this exercise, we strongly recommend adding an extension to your browser that formats the JSON output to make it easier to read, such as JSONView for Firefox, and JSON Formatter for Chrome.\nThe APIs for Neotoma can be found here: https://api.neotomadb.org/api-docs/. Look through the lists of different APIs and find the one labeled GET /v2.0/data/sites/{siteid}. Then, click on the Try It Out button at right, enter 666 into the site identifier box, and click Execute. Then scroll down. You should see some example code in curl format (ignore this) and as a URL. If you scroll down further, you’ll see the actual data return, in JSON format. JSON is a structured data format designed to be both human-readable and machine-readable. It looks like a nested series of lists.\nNow, let’s go from the API sandbox to direct use of the API URLs in a browser. Copy and paste the below URL into the URL box in your browser:\nhttps://api.neotomadb.org/v2.0/data/sites?sitename=%devil%\nThis should open a new web page in your browser with a returned JSON object. For this search, the JSON object should include 16 or more sites with the name ‘devil’ in them (note the use of % as wildcards), including Devil’s Lake, WI. The opening line “status” = “success” means that the API ran successfully. Note that it is possible for an API to run successfully but return no data! For example, try:\nhttps://api.neotomadb.org/v2.0/data/sites?sitename=devil\nHere, “status” = “success” but data=[], i.e. the API successfully reported back to you that no sites in Neotoma have the exact name of ‘devil’.\nOnce you know what an API is, you will quickly see how widely these are used by modern browsers and websites. For example, try:\nhttps://www.google.com/search?q=neotoma&ei=-xE_Y4XHA8GF0PEPi6-p-AU&ved=0ahUKEwjFsPSAksz6AhXBAjQIHYtXCl8Q4dUDCA0&uact=5&oq=neotoma&gs_lcp=Cgdnd3Mtd2l6EAMyDgguEIAEEIsDEKgDEJ4DMggILhCABBCLAzIICC4QgAQQiwMyCAguEIAEEIsDMggILhCABBCLAzIICAAQkQIQiwMyCAguEIAEEIsDMggILhCABBCLAzIICC4QgAQQiwMyCAgAEIAEEIsDOgoIABBHENYEELADOgcIABCwAxBDOg0IABDkAhDWBBCwAxgBOgwILhDIAxCwAxBDGAI6DwguENQCEMgDELADEEMYAjoOCC4QgAQQxwEQ0QMQ1AI6CwgAEIAEELEDEIMBOhEILhCABBCxAxCDARDHARDRAzoOCC4QgAQQsQMQgwEQ1AI6FAguEIAEELEDEIMBENQCEJsDEKgDOg4ILhCABBDHARDRAxCLAzoOCAAQgAQQsQMQgwEQiwM6EQguEIAEENQCEIsDEKgDEKQDOg4IABCRAhCLAxCmAxCoAzoNCAAQQxCLAxCoAxCmAzoFCAAQgAQ6CAguELEDEIMBOgsILhCABBDHARCvAToHCAAQQxCLAzoICC4QgAQQsQM6CAgAEIAEELEDOhEILhCABBCxAxDUAhCjAxCoAzoLCC4QsQMQgwEQiwM6BwgAEIAEEAo6DggAELEDEIMBEJECEIsDOhAIABCABBCxAxCDARAKEIsDOgoIABCABBAKEIsDOgUIABCRAkoECEEYAEoECEYYAVC5BVirCmDFDGgBcAF4AIABjAGIAdcFkgEDMy40mAEAoAEByAERuAEDwAEB2gEGCAEQARgJ2gEGCAIQARgI&sclient=gws-wiz\nNote that in this demo use of the Google search API, all we did is enter ‘neotoma’ in the standard Google search window and then Google produced and formatted the above API query with a ?search parameter (and who knows what else is lurking in that massive text parameter…)\nOK, now your turn:\nExercise question 1 Use the sites API to retrieve site data for sites of interest. The sites API has a few different parameters, so try out options. Try copying and pasting the URLs into the address line of your browser, and then hitting return. In your homework exercise, provide at least two sites API calls (as URLs) with a comment line for each that explains what the API command is doing."
  },
  {
    "objectID": "04-neotoma2.html#part2-getting-started-with-neotoma2",
    "href": "04-neotoma2.html#part2-getting-started-with-neotoma2",
    "title": "5  The neotoma2 package",
    "section": "5.3 Part2: Getting Started With neotoma2",
    "text": "5.3 Part2: Getting Started With neotoma2\nFor this workbook we use several packages, including leaflet, sf and others. We load the packages using the pacman package, which will automatically install the packages if they do not currently exist in your set of packages.\n\n\n\n\n\n\nPackages required for this section\n\n\n\nneotoma2 is available from GitHub and can be installed in R using the devtools package via devtools:\n\n# Load up the package\nif (!require(\"devtools\")) install.packages(\"devtools\", repos=\"http://cran.r-project.org\")\ndevtools::install_github('NeotomaDB/neotoma2')\nif (!require(\"pacman\")) install.packages(\"pacman\", repos=\"http://cran.r-project.org\")\npacman::p_load(dplyr, ggplot2, neotoma2, sf, geojsonsf, leaflet, raster, DT, rioja) # devtools allows us to install from online repositories\n\n\n\n\n5.3.1 Good coding practice: explicitly naming packages and functions\nDifferent packages in R are created independently by different teams of developers, and it’s very common for two different packages to use the same function names (the English language is finite…). This can lead to coding errors if you call a function that you know is in one package, but R guesses wrongly that you wanted a function of the same name from an entirely different package. For example, for a function like filter(), which exists in both neotoma2 and other packages such as dplyr, you may see an error that looks like:\nError in UseMethod(\"filter\") :\n no applicable method for 'filter' applied to an object of class \"sites\"\nYou can avoid this error by explicitly naming which package has the function that you want to use, through the standard convention of double colons (package.name::function.name). For example, using neotoma2::filter() tells R explicitly that you want to use the filter() function in the neotoma2 package, not some other package version.\nSummary: It’s good coding practice to always explicitly link packages to the functions that you are using! Your future self will thank you.\n\n\n5.3.2 Getting Help with Neotoma (APIs, R, Explorer, Tilia, …)\nFor Geog523, the class Slack workspace is your first and best option. If you’re planning on working with Neotoma more in the future, please join us on Slack, where we manage a channel specifically for questions about the R package. You may also wish to join Neotoma’s Google Groups mailing list, and if so contact us to be added."
  },
  {
    "objectID": "04-neotoma2.html#neotoma2-site-searches-get_sites",
    "href": "04-neotoma2.html#neotoma2-site-searches-get_sites",
    "title": "5  The neotoma2 package",
    "section": "5.4 Neotoma2: Site Searches: get_sites()",
    "text": "5.4 Neotoma2: Site Searches: get_sites()\nMany users of Neotoma first want to search and explore data at the site level. There are several ways to find sites in neotoma2, but we think of sites primarily as spatial objects. They have names, locations, and are found within geopolitical units. However, sites themselves do not have associated information about taxa, dataset types, or ages. sites instead are simply the container into which we add that information. So, when we search for sites we can search by:\n\nsiteid\nsitename\nlocation\naltitude (maximum and minimum)\ngeopolitical unit\n\n\n5.4.0.1 Searching by Site Name: sitename=\"%Devil%\"\nWe may know exactly what site we’re looking for (“Devil’s Lake”), or have an approximate guess for the site name (for example, we know it’s something like “Devil Pond”, or “Devil’s Hole”).\nWe use the general format: get_sites(sitename=\"XXXXX\") for searching by name.\nPostgreSQL (and the API) uses the percent sign as a wildcard. So \"%Devil%\" would pick up “Devils Lake” for us (and would pick up “Devil’s Canopy Cave”). Note that the search query is case insensitive, so \"%devil%\" will work.\nIf we want an individual record we can use the siteid, which is a unique identifier for each site: .\n\nCodeResult\n\n\n\ndevil_sites <- neotoma2::get_sites(sitename = \"%Devil%\")\nplotLeaflet(devil_sites)\n\n\n\n\n\n\n\n\n\n\n\n\nExercise question 2 How many sites have the name ‘clear’ in them? Show both your code and provide the total count.\n\n\n5.4.0.2 Searching by Location: loc=c()\nThe neotoma package used a bounding box for locations, structured as a vector of latitude and longitude values: c(xmin, ymin, xmax, ymax). The neotoma2 R package supports both this simple bounding box and also more complex spatial objects, using the sf package. Using the sf package allows us to more easily work with raster and polygon data in R, and to select sites using more complex spatial objects. The loc parameter works with the simple vector, WKT, geoJSON objects and native sf objects in R. Note however that the neotoma2 package is a wrapper for a simple API call using a URL (see APIs above), and URL strings have a maximum limit of 1028 characters, so the API currently cannot accept very long/complex spatial objects.\nAs an example of different ways that you can search by location, let’s say you wanted to search for all sites in the state of Michigan. Here are three spatial representations of Michigan: 1) a geoJSON list with five elements, 2) WKT, and 3) bounding box representation. And, as a fourth variant, we’ve transformed the mich$geoJSON element to an object for the sf package. Any of these four spatial representations work with the neotoma2 package.\n\nmich <- list(geoJSON = '{\"type\": \"Polygon\",\n        \"coordinates\": [[\n            [-86.95, 41.55],\n            [-82.43, 41.55],\n            [-82.43, 45.88],\n            [-86.95, 45.88],\n            [-86.95, 41.55]\n            ]]}',\n        WKT = 'POLYGON ((-86.95 41.55,\n                         -82.43 41.55,\n                         -82.43 45.88,\n                         -86.95 45.88,\n                         -86.95 41.55))',\n        bbox = c(-86.95, 41.55, -82.43, 45.88))\n\nmich$sf <- geojsonsf::geojson_sf(mich$geoJSON)[[1]]\n\nmich_sites <- neotoma2::get_sites(loc = mich$geoJSON, all_data = TRUE)\n\nYou can always simply plot() the sites objects, but this won’t show any geographic context. The leaflet::plotLeaflet() function returns a leaflet() map, and allows you to further customize it, or add additional spatial data (like our original bounding polygon, mich$sf, which works directly with the R leaflet package):\n\nCodeResult\n\n\n\nneotoma2::plotLeaflet(mich_sites) %>%\n  leaflet::addPolygons(map = .,\n                       data = mich$sf,\n                       color = \"green\")\n\n\n\n\n\n\n\n\n\n\n\n\nExercise question 3 Which state has more sites in Neotoma, Minnesota or Wisconsin? How many in each state? Provide both code and answer.\n\n\n5.4.0.3 Helper Functions for Site Searches\n\n\n\nNeotoma R Package Universal Modeling Language (UML) diagram.\n\n\nIf we look at the UML diagram for the objects in the neotoma2 R package, we can see that there are a set of functions that can operate on sites. As we add to sites objects, using get_datasets() or get_downloads(), we are able to use more of these helper functions. We can use functions like summary() to get a more complete sense of the types of data in this set of sites.\nThe following code gives the summary table. We do some R magic here to change the way the data is displayed (turning it into a datatable() object using the DT package), but the main function is the summary() call.\n\nCodeResult\n\n\n\nneotoma2::summary(mich_sites)\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can see that there are no chronologies associated with the site objects. This is because, at present, we have not pulled in the dataset information we need. All we know from get_sites() are the kinds of datasets we have.\n\n\n5.4.1 Searching for Datasets\nNow that we know how to search for sites, we can start to search for datasets. As we’ve discussed before, in the Neotoma data model, each site can contain one or more collection units, each of which can contain one or more datasets. Similarly, a sites object contains collectionunits which contain datasets. From the table above, we can see that some of the sites we’ve looked at contain pollen data. However, so far we have only downloaded the sites data object and not any of the actual pollen data, it’s just that (for convenience) the sites API returns some information about datasets, to make it easier to navigate the records.\nWith a sites object we can directly call get_datasets(), to pull in more metadata about the datasets. At any time we can use datasets() to get more information about any datasets that a sites object may contain. Compare the output of datasets(mich_sites) to the output of a similar call using the following:\n\nCodeResult\n\n\n\nmich_datasets <- neotoma2::get_datasets(mich_sites, all_data = TRUE)\n\ndatasets(mich_datasets)\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise question 4: How many different kinds of datasets are available at Devil’s Lake, WI? Show both code and answer. Ensure that your code just retrieves datasets for just this single site.\n\n\n5.4.2 Filter Records\nIf we choose to pull in information about only a single dataset type, or if there is additional filtering we want to do before we download the data, we can use the filter() function. For example, if we only want pollen records, and want records with known chronologies, we can filter:\n\nCodeResult\n\n\n\nmich_pollen <- mich_datasets %>%\n  neotoma2::filter(datasettype == \"pollen\" & !is.na(age_range_young))\n\nneotoma2::summary(mich_pollen)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote, that we are filtering on two conditions. (You may want to look up the operators being used in the above code: ==, &, and ! to understand what they accomplish in the code.) We can see now that the data table looks different, and there are fewer total sites.\n\n\n5.4.3 Retrieving sample() data.\nThe sample data are the actual data that scientists usually want - counts of pollen grains, lists of vertebrate fossil occurrences, etc. Because sample data can have fairly large data volumes (each dataset may contain many samples), which can strain server bandwidth and local computing memory, we try to call get_downloads() after we’ve done our preliminary filtering. After get_datasets(), you have enough information to filter based on location, time bounds, and dataset type. When we move to get_downloads() we can do more fine-tuned filtering at the analysis unit or taxon level.\nThe following command may take a few moments to run. (If it takes too long, we have stored an already-downloaded version of the function output as an RDS data file that you can load directly into R.)\n\nmich_dl <- mich_pollen %>% get_downloads(all_data = TRUE)\n\n...........................\n\n# mich_dl <- readRDS('data/mich_dl.rds')\n\nOnce we’ve downloaded the sample data, we now have information for each site about all the associated collection units, the datasets, and, for each dataset, all the samples associated with the datasets. To extract all the samples we can call:\n\nallSamp <- samples(mich_dl)\n\nWhen we’ve done this, we get a data.frame that is 38062 rows long and 37 columns wide. The reason the table is so wide is that we are returning data in a long format. Each row contains all the information you should need to properly interpret it:\n\n\n [1] \"age\"             \"agetype\"         \"ageolder\"        \"ageyounger\"     \n [5] \"chronologyid\"    \"chronologyname\"  \"units\"           \"value\"          \n [9] \"context\"         \"element\"         \"taxonid\"         \"symmetry\"       \n[13] \"taxongroup\"      \"elementtype\"     \"variablename\"    \"ecologicalgroup\"\n[17] \"analysisunitid\"  \"sampleanalyst\"   \"sampleid\"        \"depth\"          \n[21] \"thickness\"       \"samplename\"      \"datasetid\"       \"database\"       \n[25] \"datasettype\"     \"age_range_old\"   \"age_range_young\" \"datasetnotes\"   \n[29] \"siteid\"          \"sitename\"        \"lat\"             \"long\"           \n[33] \"area\"            \"sitenotes\"       \"description\"     \"elev\"           \n[37] \"collunitid\"     \n\n\nFor some dataset types, or analyses some of these columns may not be needed, however, for other dataset types they may be critically important. To allow the neotoma2 package to be as useful as possible for the community we’ve included as many as we can.\n\n5.4.3.1 Extracting Taxa\nIf you want to know what taxa we have in a dataset, you can use the helper function taxa() on the sites object. The taxa() function gives us, not only the unique taxa, but two additional columns, sites and samples, that tell us how many sites the taxa appear in, and how many samples the taxa appear in, to help us better understand how common individual taxa are.\n\nCodeResults\n\n\n\nneotomatx <- neotoma2::taxa(mich_dl)\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe taxonid values can be linked to the taxonid column in the samples(). This allows us to build taxon harmonization tables if we choose to. Note also that the taxonname is in the field variablename. Individual sample counts are reported in Neotoma as variables. A “variable” may be either a species for which we have presence or count data, a geochemical measurement, or any other proxy, such as charcoal counts. Each stored entry for a variable includes the units of measurement and the value.\n\n\n5.4.3.2 Taxonomic Harmonization (Simple)\nA standard challenge in Neotoma (and in biodiversity research more generally) is that different scientists use different names for taxonomic entities such as species. Even if everyone agrees on a common taxonomy, it’s quite possible that a given fossil might be only partially identifiable, perhaps just to genus or even family. Hence, when working with data from Neotoma, a common intermediary step is to ‘harmonize’ all the taxa names stored in Neotoma into some standard names of interest to you.\nLet’s say we want to know the past distribution of Pinus. We want all the various pollen morphotypes that are associated with Pinus (e.g. Pinus strobus, Pinus strobus-type, Pinus undif., Pinus banksiana/resinosa) to be grouped together into one aggregated taxon names called Pinus. There are several ways of doing this, either directly by exporting the file and editing each individual cell, or by creating an external “harmonization” table.\nProgrammatically, we can harmonize all the taxon names using matching and transformation. We’re using dplyr type coding here to mutate() the column variablename so that any time we detect (str_detect()) a variablename that starts with Pinus (the .* represents a wildcard for any character [.], zero or more times [*]) we replace() it with the character string \"Pinus\". Note that this changes Pinus in the allSamp object, but if we were to call samples() again, the taxonomy would return to its original form.\nAs a first step, we’re going to filter the ecological groups to include only UPHE (upleand/heath) and TRSH (trees and shrubs). (More information about ecological groups is available from the Neotoma Online Manual.) After converting all _Pinus._ records to Pinus* we then sum the counts of the Pinus records.\n\nallSamp <- allSamp %>%\n  dplyr::filter(ecologicalgroup %in% c(\"UPHE\", \"TRSH\")) %>%\n  mutate(variablename = replace(variablename,\n                                stringr::str_detect(variablename, \"Pinus.*\"),\n                                \"Pinus\"),\n         variablename = replace(variablename,\n                                stringr::str_detect(variablename, \"Picea.*\"),\n                                \"Picea\")) %>%\n  group_by(siteid, sitename,\n           sampleid, variablename, units, age,\n           agetype, depth, datasetid,\n           long, lat) %>%\n  summarise(value = sum(value), .groups='keep')\n\nThere were originally 6 different taxa identified as being within the genus Pinus (including Pinus, Pinus subg. Pinus, and Pinus undiff.). The above code reduces them all to a single taxonomic group Pinus. We can check out the unique names by using:\n\nCodeResult\n\n\n\nneotomatx %>%\n  ungroup() %>%\n  dplyr::filter(stringr::str_detect(variablename, \"Pinus\")) %>%\n  summarise(pinus_spp = unique(variablename))\n\n# I actually like Base here for the one-liner:\n# unique(grep(\"Pinus\", neotomatx$variablename, value = TRUE))\n\n\n\n\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\n\n\n\n\n\n\n\nExercise question 5: Follow the Pinus example above, but now for Picea. How many taxon names were aggregated into your Picea name?\nIf we want to store a record of our choices outside of R, we can use an external table. For example, a table of pairs (what we want changed, and the name we want it replaced with) can be generated, and it can include regular expressions (if we choose):\n\n\n\noriginal\nreplacement\n\n\n\n\nAbies.*\nAbies\n\n\nVaccinium.*\nEricaceae\n\n\nTypha.*\nAquatic\n\n\nNymphaea\nAquatic\n\n\n…\n…\n\n\n\nWe can get the list of original names directly from the taxa() call, applied to a sites object, and then export it using write.csv(). We can also do some exploratory plots of the data:\n\nCodeResult\n\n\n\ntaxaplots <- taxa(mich_dl)\n# Save the taxon list to file so we can edit it subsequently.\nreadr::write_csv(taxaplots, \"data/mytaxontable.csv\")\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nFigure. A plot of the number of sites a taxon appears in, against the number of samples a taxon appears in.\n\n\n\n\n\n\n\nThe plot is mostly for illustration, but we can see, as a sanity check, that the relationship is as we’d expect."
  },
  {
    "objectID": "04-neotoma2.html#simple-analytics",
    "href": "04-neotoma2.html#simple-analytics",
    "title": "5  The neotoma2 package",
    "section": "5.5 Simple Analytics",
    "text": "5.5 Simple Analytics\n\n5.5.1 Stratigraphic Plotting: Building a Pollen Diagram\nAs you’ve seen already, stratigraphic diagrams are a very common way of viewing geological data, in which time is represented vertically and with older materials at bottom, just like in the sediment record. Palynologists use a particular form of a stratigraphic diagram called a pollen diagram.\nWe can use packages like rioja to do stratigraphic plotting for a single dataset. Here, we’ll take a few key species at a single site and plot them.\n\n# Get a particular site, select only taxa identified from pollen (and only trees/shrubs)\n# Transform to proportion values.\ndevils_samples <- get_sites(siteid = 666) %>%\n  get_downloads() %>%\n  samples()\n\ndevils_samples <- devils_samples %>%\n  mutate(variablename = replace(variablename,\n                                stringr::str_detect(variablename, \"Pinus.*\"),\n                                \"Pinus\")) %>%\n  group_by(siteid, sitename,\n           sampleid, variablename, units, age,\n           agetype, depth, datasetid,\n           long, lat) %>%\n  summarise(value = sum(value), .groups='keep')\n\n\nonesite <- devils_samples %>%\n  group_by(age) %>%\n  mutate(pollencount = sum(value, na.rm = TRUE)) %>%\n  group_by(variablename) %>%\n  mutate(prop = value / pollencount) %>%\n  arrange(desc(age))\n\n# Spread the data to a \"wide\" table, with taxa as column headings.\nwidetable <- onesite %>%\n  dplyr::select(age, variablename, prop) %>%\n  mutate(prop = as.numeric(prop))  %>%\n  dplyr::filter(variablename %in% c(\"Pinus\", \"Betula\", \"Quercus\",\n                             \"Tsuga\", \"Ulmus\", \"Picea\"))\n\ncounts <- tidyr::pivot_wider(widetable,\n                             id_cols = age,\n                             names_from = variablename,\n                             values_from = prop,\n                             values_fill = 0)\n\nThis appears to be a fairly long set of commands, but the code is pretty straightforward, and it provides you with significant control over the taxa for display, units pf measurement, and other elements of your data before you get them into the wide matrix (depth by taxon) that most statistical tools such as the vegan package or rioja use. To plot we can use rioja’s strat.plot(), sorting the taxa using weighted averaging scores (wa.order). We’ve also added a CONISS plot to the edge of the plot, to show how the new wide data frame works with distance metric functions. (We’ll talk more about distance and dissimilarity metrics in upcoming labs.)\n\nclust <- rioja::chclust(dist(sqrt(counts)),\n                        method = \"coniss\")\n\nplot <- rioja::strat.plot(counts[,-1] * 100, yvar = counts$age,\n                  title = devils_samples$sitename[1],\n                  ylabel = \"Calibrated Years BP\",\n                  xlabel = \"Pollen (%)\",\n                  y.rev = TRUE,\n                  clust = clust,\n                  wa.order = \"topleft\", scale.percent = TRUE)\n\nrioja::addClustZone(plot, clust, 4, col = \"red\")\n\n\n\n\nExercise question 6: Make a stratigraphic pollen diagram in rioja, for a site of your choice (not Devils Lake) and taxa of your choice. Show code and resulting diagram.\n\n\n5.5.2 Change Taxon Distributions Across Space and Time\nThe true power of Neotoma is its ability to support large-scale analyses across many sites, many s time periods within sites, many proxies, and many taxa. As a first dipping of our toes in the water, lets look at temporal trends in abundance when averaged across ites. We now have site information across Michigan, with samples, and with taxon names. Let’s say we are interested in looking at the distributions of the selected taxa across time, their presence/absence:\n\ntaxabyage <- allSamp %>%\n  dplyr:::filter(variablename %in% c(\"Pinus\", \"Betula\", \"Quercus\",\n                             \"Tsuga\", \"Ulmus\", \"Picea\"),\n                             age < 11000) %>%\n  group_by(variablename, \"age\" = round(age * 2, -3) / 2) %>%\n  summarise(n = length(unique(siteid)), .groups = 'keep')\n\nsamplesbyage <- allSamp %>%\n  dplyr::filter(variablename %in% c(\"Pinus\", \"Betula\", \"Quercus\",\n                             \"Tsuga\", \"Ulmus\", \"Picea\")) %>%\n  group_by(\"age\" = round(age * 2, -3) / 2) %>%\n  summarise(samples = length(unique(siteid)), .groups = 'keep')\n\ngroupbyage <- taxabyage %>%\n  inner_join(samplesbyage, by = \"age\") %>%\n  mutate(proportion = n / samples)\n\nggplot(groupbyage, aes(x = age, y = proportion)) +\n  geom_point() +\n  geom_smooth(method = 'gam',\n              method.args = list(family = 'binomial')) +\n  facet_wrap(~variablename) +\n  #coord_cartesian(xlim = c(22500, 0), ylim = c(0, 1)) +\n  scale_x_reverse() +\n  xlab(\"Proportion of Sites with Taxon\") +\n  theme_bw()\n\n\n\n\nWe can see clear patterns of change for at least some taxa, and the smoothed surfaces are modeled using Generalized Additive Models (GAMs) in R, so we can have more or less control over the actual modeling using the gam or mgcv packages. Depending on how we divide the data we can also look at shifts in altitude, latitude or longitude to better understand how species distributions and abundances changed over time in this region.\nNote that for some taxa, they always have a few pollen grains in all pollen samples, so this ‘proportion of sites with taxon’ isn’t very informative. Calculating a metric like average abundance might be more useful.\nExercise question 7: Repeat the above example, for a different state or other geographic region of your choice."
  },
  {
    "objectID": "04-neotoma2.html#conclusion",
    "href": "04-neotoma2.html#conclusion",
    "title": "5  The neotoma2 package",
    "section": "5.6 Conclusion",
    "text": "5.6 Conclusion\nSo, we’ve done a lot in this exercise. We’ve (1) learned how APIs work (2) searched for sites using site names and geographic parameters, (3) filtered results using temporal and spatial parameters, (4) built a pollen diagram, and (5) done a first-pass spatial mapping of taxa. We will build upon this methodological foundation in future lab exercises."
  },
  {
    "objectID": "04-neotoma2.html#to-do",
    "href": "04-neotoma2.html#to-do",
    "title": "5  The neotoma2 package",
    "section": "5.7 To do:",
    "text": "5.7 To do:\n\nCheck ‘Parts’ Should be consistent with other sections\nExercises currently in-text. should be own part like age-depth-modelling?\nerror in all_data = TRUE\ninclude resources section\n\n\n\n\n\nGoring, Simon, Andria Dawson, Gavin Simpson, Karthik Ram, Russ Graham, Eric Grimm, and John Williams. 2015. “Neotoma: A Programmatic Interface to the Neotoma Paleoecological Database.” Open Quaternary 1 (1): Art. 2. https://doi.org/10.5334/oq.ab."
  },
  {
    "objectID": "05-wrangling-visualisation.html",
    "href": "05-wrangling-visualisation.html",
    "title": "6  Data wrangling and visualisations",
    "section": "",
    "text": "Data checks\nTidying data\nPlotting data"
  },
  {
    "objectID": "06-exploratory-analyses.html#part-1-background",
    "href": "06-exploratory-analyses.html#part-1-background",
    "title": "7  Exploratory analyses",
    "section": "7.1 Part 1: Background",
    "text": "7.1 Part 1: Background\nThere are multiple methods of describing palaeoecological data in terms of species communities. Older, but still valid, methods include CONISS and … Modern methods include machine learning methods such as boosted regression trees and latent dirichlet allocation.\n\n\n\n\n\n\nPackages required for this section\n\n\n\n\n# Load up the package\nif (!require(\"devtools\")) install.packages(\"devtools\", repos=\"http://cran.r-project.org\")\ndevtools::install_github('NeotomaDB/neotoma2')\nif (!require(\"pacman\")) install.packages(\"pacman\", repos=\"http://cran.r-project.org\")\npacman::p_load(tidyr, dplyr, ggplot2, neotoma2, analogue, vegan) # devtools allows us to install from online repositories\n\n\n\nFor most of the rest of this workbook we will be using the Devil’s Lake dataset downloaded in Chapter 5. We’ve included a catch-up block of code that downloads and formats the data so that this section can be run independently of the previous one.\n\n\n\n\n\n\nRespawn code\n\n\n\nThe following code recreates the necessary formatted data from Devil’s Lake using the neotoma2 package. We have provided this dataset as an .rds file in the data directory, it is preferable to read the dataset avoid repeated API calls. the following code is included so that you can manipulate the inputs (e.g., sideid = and harmonising taxa) and object name to download and experiment with different datasets.\n\n# The following code can be done in one pipeline but we have split it into chunks to help with readablity\ndevils_samples <- get_sites(siteid = 666) %>% # Download the site samples data\n  get_downloads() %>%\n  samples()\n\ndevils_samples <- devils_samples %>%+\n  dplyr::filter(ecologicalgroup %in% c(\"UPHE\", \"TRSH\"), # Filter ecological groups by upland heath and trees and shrubs\n         elementtype == \"pollen\", # filter bu pollen samples\n         units == \"NISP\") %>% # Filter by sampling unit\n  mutate(variablename = replace(variablename,\n                                stringr::str_detect(variablename, \"Pinus.*\"), # Harmonize Pinus into one group\n                                \"Pinus\")) %>%\n  group_by(siteid, sitename,\n           sampleid, variablename, units, age,\n           agetype, depth, datasetid,\n           long, lat) %>%\n  summarise(value = sum(value), .groups='keep') # The group_by function will drop columns not used as grouping variables\n\ndevils_samples <- devils_samples %>% # Calculate proportions of each species by year group\n  group_by(age) %>%\n  mutate(pollencount = sum(value, na.rm = TRUE)) %>%\n  group_by(variablename) %>%\n  mutate(prop = value / pollencount) %>%\n  arrange(desc(age)) %>%\n  ungroup()\n\nsaveRDS(devils_samples, \"./data/devils_samples.rds\") # Save the data for later\n\nThe following code reads-in the Devil’s Lake data provided in the data directory. Sometimes minor mistakes along the way lead to errors, so you can always come back here and read in the formatted data again.\n\n# Load up the data\ndevils_samples <- readRDS(\"./data/devils_samples.rds\")\n\n\n\nThe data are in long format as a tibble, i.e., similar to a dataframe. This format can be great for data wrangling and plotting; however, many analyses require a specific input such as a (wide) site-by-species matrix. It is important to be comfotable with pivoting data between long and wide formats and converting between dataframes/tibbles and matrices. Remember, that unlike dataframes and tibbles, matrices cannot be of mixed type (e.g., strings and numbers).\n\n\n\n\n\n\nOh no! 😱\n\n\n\nIf a numeric matrix is required as the input make sure the data haven’t been converted to strings. R will coerce numbers to characters if there is a character (like a nameing column) in the matrix. This coersion can go unnoticed when converting from a dataframe to a matrix.\n\nstring_matrix <- matrix(c(\"1\", 2:10), nrow = 2) # see the numbers are in quotes indicating a string? \nstr(string_matrix) # Check the structure\n\n chr [1:2, 1:5] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"10\"\n\n\nNumeric matrix:\n\nnumeric_matrix <- matrix(1:10, nrow = 2) # see the numbers are in quotes indicating a string? \nstr(numeric_matrix) # Check the structure\n\n int [1:2, 1:5] 1 2 3 4 5 6 7 8 9 10\n\n\nMatrices can have names (e.g., species names) as column names and maintain a numeric structure, for example: colnames(numeric_matrix) <- LETTERS[1:5].\n\n\nThe analogue package calculates several distance metrics on site-by-species matrices. So let’s pivot our data to wide format and convert it to a matrix. This can be done in several ways in R, for consistency’s sake we’ll use tidyr:\n\ndevils_samples_wide <- devils_samples %>%\n    tidyr::pivot_wider(id_cols = c(age, depth),\n                       names_from = variablename,\n                       values_from = prop,\n                       values_fill = 0) %>%\n    as.matrix()\n\ndevils_ad <- devils_samples_wide[ , c(1:2)] # store the ages and depths separately\n\ndevils_samples_wide <- devils_samples_wide[ , -c(1:2)] # drop ages and depth as they are not included in the distance calculations\ndevils_names <- colnames(devils_samples_wide)\n\nmmm can I fill NAs with 0s using SQchord?\n\nCodeResult\n\n\n\ndevils_sqdist <- analogue::distance(devils_samples_wide, method = \"SQchord\")"
  },
  {
    "objectID": "07-dissimilarity-roc.html",
    "href": "07-dissimilarity-roc.html",
    "title": "8  Dissimilarity and Rates of Change",
    "section": "",
    "text": "Here is an equation.\n\\[\\begin{equation}\n  f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k}\n  (\\#eq:binom)\n\\end{equation}\\]"
  },
  {
    "objectID": "08-no-analogue.html",
    "href": "08-no-analogue.html",
    "title": "9  Novelty and No Analogue Futures",
    "section": "",
    "text": "Jack"
  },
  {
    "objectID": "09-ordination-pca.html",
    "href": "09-ordination-pca.html",
    "title": "10  Ordination: Principal Component Analysis",
    "section": "",
    "text": "Principal Component Analysis (PCA) is a statistical method for reducing \\(n\\)-dimensional data (e.g., the \\(n\\) species in your data) to fewer axes that minimise the variance in the data."
  },
  {
    "objectID": "10-ordination-nmds.html",
    "href": "10-ordination-nmds.html",
    "title": "11  Ordination: Non-metric Dimension Scaling",
    "section": "",
    "text": "I need wifi."
  },
  {
    "objectID": "11-gams.html#hierarchical-generalised-additive-models.",
    "href": "11-gams.html#hierarchical-generalised-additive-models.",
    "title": "12  Generalised Additive Models",
    "section": "12.1 Hierarchical Generalised Additive Models.",
    "text": "12.1 Hierarchical Generalised Additive Models."
  },
  {
    "objectID": "12-tapas.html",
    "href": "12-tapas.html",
    "title": "13  Charcoal Analysis using TAPAS",
    "section": "",
    "text": "Tapas is a R package for analysing charcoal"
  },
  {
    "objectID": "13-psm.html",
    "href": "13-psm.html",
    "title": "14  Proxy System Modelling",
    "section": "",
    "text": "Should this be replaced with LDA/CTM?"
  },
  {
    "objectID": "15-test-chapter.html",
    "href": "15-test-chapter.html",
    "title": "15  Test pad to delete",
    "section": "",
    "text": "Sandbox chapter for testing scripts outside main writing if necessary\n\n\n\n\n\n\nPackages required for this section\n\n\n\nList of packages required for section and what they are used for\n\n\n\n\n\n\n\n\nRespawn code\n\n\n\nBegin each section with a code-block that can be run to reproduce the necessary data format for the upcoming section\n\n\n\n\n\n\n\n\nOh no! 😱\n\n\n\nExample of common mistakes\n\n\n\n\n\n\n\n\nGood practice tip\n\n\n\nTips on version control, directory structure (and anything else) that make life easier\n\n\n\n\n\n\n\n\nResources\n\n\n\nList of packages required for section and what they are used for"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Blaauw, Maarten, J. Andrés Christen, K. D. Bennett, and Paula J. Reimer.\n2018. “Double the Dates and Go for Bayes\nImpacts of Model Choice, Dating Density and Quality on\nChronologies.” Quaternary Science Reviews 188 (May):\n58–66. https://doi.org/10.1016/j.quascirev.2018.03.032.\n\n\nBlois, Jessica L., John W. (Jack) Williams, Eric C. Grimm, Stephen T.\nJackson, and Russell W. Graham. 2011. “A Methodological Framework\nfor Assessing and Reducing Temporal Uncertainty in Paleovegetation\nMapping from Late-Quaternary Pollen Records.”\nQuaternary Science Reviews 30 (15-16): 1926–39. https://doi.org/10.1016/j.quascirev.2011.04.017.\n\n\nGoring, Simon, Andria Dawson, Gavin Simpson, Karthik Ram, Russ Graham,\nEric Grimm, and John Williams. 2015. “Neotoma: A\nProgrammatic Interface to the Neotoma Paleoecological\nDatabase.” Open Quaternary 1 (1): Art. 2. https://doi.org/10.5334/oq.ab.\n\n\nGoring, S., J. W. Williams, J. L. Blois, S. T. Jackson, C. J. Paciorek,\nR. K. Booth, J. R. Marlon, M. Blaauw, and J. A. Christen. 2012.\n“Deposition Times in the Northeastern United States\nDuring the Holocene: Establishing Valid Priors for\nBayesian Age Models.” Quaternary Science\nReviews 48 (August): 54–60. https://doi.org/10.1016/j.quascirev.2012.05.019.\n\n\nMottl, Ondřej, Suzette G. A. Flantua, Kuber P. Bhatta, Vivian A. Felde,\nThomas Giesecke, Simon Goring, Eric C. Grimm, et al. 2021. “Global\nAcceleration in Rates of Vegetation Change over the Past 18,000\nYears.” Science 372 (6544): 860–64. https://doi.org/10.1126/science.abg1685.\n\n\nParnell, A. C., J. Haslett, J. R. M. Allen, C. E. Buck, and B. Huntley.\n2008. “A Flexible Approach to Assessing Synchroneity of Past\nEvents Using Bayesian Reconstructions of Sedimentation\nHistory.” Quaternary Science Reviews 27 (19-20):\n1872–85. https://doi.org/10.1016/j.quascirev.2008.07.009.\n\n\nReimer, Paula J, William E N Austin, Edouard Bard, Alex Bayliss, Paul G\nBlackwell, Christopher Bronk Ramsey, Martin Butzin, et al. 2020.\n“The IntCal20 Northern Hemisphere Radiocarbon Age\nCalibration Curve (0 Cal kBP).” Radiocarbon 62 (4): 725–57.\nhttps://doi.org/10.1017/RDC.2020.41.\n\n\nSmith, A. G., and I. C. Goddard. 1991. “A 12500 Year\nRecord of Vegetational History at Sluggan\nBog, Co. Antrim, N.\nIreland (Incorporating a Pollen Zone\nScheme for the Non-Specialist).” The New\nPhytologist 118 (1): 167–87.\n\n\nTrachsel, Mathias, and Richard J Telford. 2017. “All Agedepth\nModels Are Wrong, but Are Getting Better.” The Holocene\n27 (6): 860–69. https://doi.org/10.1177/0959683616675939."
  }
]